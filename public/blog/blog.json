{
  "posts": [

    {
        "id": "p5",
        "title": "Architecture and Design Decisions of MLBGraphs",
        "url": "mlbgraphs",
        "teaser": "My reasons for design decisions regarding my Fullstack Node/React/D3 site",
        "date": "March 6, 2017",
        "content": [
            ["h3", "Creating a responsive bubble chart with dynamic data"],
            ["a", "http://mlbgraphs.herokuapp.com/#/", "Link to Deployment"],
            ["p", "I have made a few bubble charts using D3 before, but this was the first one I created using an unknown dataset, and it also included by far the biggest set of data. For these reasons, I knew I needed to be a little smarter in writing the code, and make every aspect of the code as dynamic as possible – and not relying on hard coding."],
            ["p", "The first step in working on the graphic was simply deciding what I wanted the user experience to be. What should be shown and what controls should the user have? I decided that it made the most sense to only display one statistic at a time, and show one bubble for each year of data. While it was reasonable to cram in more data in the scatter plot, I felt that trying to display that much data in a bubble chart would just be an overload and make the chart unreadable. I wanted to display one stat at a time, and probably have some controls for the user to switch between different stats. I also knew that I’d want the bubbles to be color coded so multiple players could be viewed at the same time. The last thing I really wanted was for the size of the bubbles to be proportionate to that player’s performance, meaning that a bubble representing a 50 home run season should be bigger than a bubble representing a 10 home run season."],
            ["p", "Upon first jumping into the code, I had the luxury of already knowing exactly what the incoming data structures would look like since at this point I had already completed the back-end data scraping algorithm and the D3 scatter plot. The data came back as an array of objects, each with a player name, position, birth year, and array of arrays of yearly data, which were each objects themselves with properties for each stat and a property for the year. I decided that it would make sense to modify how the data was structured a bit, to make it easier to work with for this particular chart. Since I wanted each bubble to represent one stat, one year and one player, I felt that converting the data into one giant array would make sense, with each element in the array consisting of an object with a player name property, the name of the statistic, and the value of the statistic. I re-formatted the data this way using the below function: "],
            ["img", "/public/blog/mlb/img3.JPG"],
            ["p", "The next problem I had to solve was that of the scales. D3 has a linear scale function that takes in a domain of data and returns a value that could be used for each bubble’s radius in the specified range. I have used this successfully in the past, but knew I would have to be smarter about how to use it this time. If I put all data into this function it would not produce a meaningful scale, as elements with a stat like hits or RBI (which could have a value over 100) would all be large bubbles, while any average-based stat like OBP (which have a below between 0 and 1) would produce a bubble at the very bottom of the specified range. This meant that I would need to create not one linear scale, but a different scale for each stat. This would allow a much better visual affect, as bubbles would not be scaled based on their relation to ALL other data points, but only the data points of that same stat."],
            ["p", "My solution to create all these scales was to loop through all possible stats (the list was passed down via props), and create a scale for that stat. I used the d3 min and d3 max functions, and a simple conditional to identify the min and max for each unique statistic, and create a scale using the min and max as the domain, and a range of 20 and 50 (which would produce bubbles with radius of 20-50 px for each stat). I then saved each scale as a property onto a ‘scales’ object, with the name being the statistic the scale represented."],
            ["p", "At this point I had the data formatted the way I wanted and a scale for each statistic, so I was ready to write the code for the actual data points. I brought in the data, stat list, and scales object as parameters of this data rendering function. This code was simple D3, binding the data to elements, adding circles, and giving it some basic styling. The only tricky part here was using the scales I had just created. To do this, when giving each circle its radius property I passed its ‘num’ property into the appropriate scale from the scales object, as seen here: "],
            ["img", "/public/blog/mlb/img4.JPG"],
            ["p", "After adding a tooltip which was dynamically modified on circle mouseover events, the last thing I needed to do was to setup the actual force part of the force layout. The affect I wanted was for a user to be able to click a button to bring the appropriate stat’s bubbles onto the screen, but I wanted to code this in a dynamic way and not just hard-code a different force function for each stat. I accomplished this by simply wrapping a d3.forceX function inside another function, which took a stat name as a parameter. Inside the forceX function I then returned width/2 (which pushes elements to the center of the screen) if the element’s statistic was equal to the inputted stat, or -2*width (which pushes it off the screen) for a different stat. I kept the Y force at a simple height/2 no matter the stat, and added a forceCollide function to keep the bubbles from running into each other, where I again passed the ‘num’ property of each element into the appropriate linear scale. The last step here was to create buttons for each stat, binded to event listeners. When the button is clicked, call the custom forceX function, passing in the ID of the button (which were given the same name as the corresponding stat) as the parameter of the custom forceX function. This meant that if a user clicks ‘HR’, then ‘HR’ would be passed in to the custom force function, and any stat with the stat attribute of ‘HR’ would be pushed towards the center of the SVG, while stats of a different type are pushed off the screen. The code is shown here: "],
            ["img", "/public/blog/mlb/img5.JPG"],
            ["p", "The benefit of writing the code with dynamic scales and forces is that I could update the available statistics data set and not have to touch any of the scale or force code, as it is currently written in a way to account for any stat since none of the scale functionality is hard-coded in. This was definitely a big eye-opener for me, as much (ok, all) of my previous D3 code was overly specific to the specific data set, and any modifications to the data would require new code to be written to account for the change."]
        ]

    },

    {
      "id": "p4",
      "title": "Creating a D3 Bubble Chart",
      "url": "d3bubblechart",
      "teaser": "Use D3 and D3Force to create a dynamic bubble chart",
      "date": "Jan 30, 2017",
      "content": [
        ["p", "This tutorial is a walkthrough of creating an interactive d3 bubble chart. The first step is to load both the standard d3 library, as well as the d3-force add-ons. They can both be found easily by searching on google, and should be inserted into the head of the relevant HTML file as shown:"],
        ["img", "/public/blog/d3bubble/d31.JPG"],
        ["p", "The two libraries can be brought in using npm very easily, with the command ‘npm I –save react-d3 d3-force’. On a standard HTML file, the libraries should be loaded in the head, with the main d3 library being brought in first. On this file I have also included a link to the javascript file I will be writing the D3 code in, and am loading that script at the end of the body. The reason for this is because this code will be manipulating the DOM so I need this script to load after the body has been written on the page. Onto the D3 code:"],
        ["img", "/public/blog/d3bubble/d32.JPG"],
        ["p", "There are 3 a few things being done here. The first is declaring variables for height and width, that will be used later."],
        ["h3", "d3.select and d3.selectAll"],
        ["p", "Next I use the d3 ‘select’ method. The way select works is that it selects the first item that matches its argument. We can use regular CSS selectors, so the code on line 4 will select the first svg element on the page. We can also select by class or ID, such as (‘#id_here’) or (‘.classname_here’). There is another method d3.selectAll that does the same thing as select, only it returns an array of all matched items, not just the first item found. In this case I used d3.select because I know there will only be one svg element on the page."],
        ["p", "Once I have selected the svg, I can give it some attributes using ‘.attr’ on likes 5 and 6, as well as apply styles with ‘.style’ on lines 7 and 8. So I have given the svg the height and width I declared earlier, as well as applied a border margin."],
        ["p", "On line 10 I hardcoded in an array of data. In a real project this data is likely coming from a database, Ajax request, etc. But for the purposes of this example I’m simply going to create the data right here on the page."],
        ["img", "/public/blog/d3bubble/d33.JPG"],
        ["h3", "d3.min and d3.max"],
        ["p", "On lines 18 and 19 I am using the d3 min and max functions. These take in an array of data, and then a second parameter that the data should be sorted by. For instance with the d3.min function I am calling, I pass in the array of data, as well as a function that implicitly returns the population attribute for each piece of data. The min function then finds the minimum value, and it is saved to the rMin variable in this example."],
        ["h3", "d3.scaleLinear"],
        ["p", "The reason for finding the maximum and minimum values is to input them into a linear scale. The scale is helpful because it can normalize an array of data and produce values on a scale that works better. The scale is created using d3.scaleLinear(), although in version 3 of react the code should be d3.scale.linear(). We can supply a domain of the min and max values that we just calculated, and then a range that we wish those values to be distributed along. In this case, the populations that ranged from 13 to 39 will now spread from 20 to 50. This will make sense in just a moment when we are sizing the bubbles in the chart."],
        ["h3", "Data and Enter methods"],
        ["p", "The next block of code is selecting the svg (which we saved to the variable svg earlier), and from it, selecting everything with the class of ‘node’. Now, obviously at this point in the code there is nothing with the class of node. The way d3 works is that it can retroactively select items after they have been created, so while these elements with the class named node do not exist now, if we create them later, this selection will work."],
        ["p", "The next line calls the ‘.data’ method, which allows us to bind our data to these elements with the class node. In this case I saved the data to the variable data, so the code is ‘.data(data)’.  Then we call the ‘enter’ method. The enter method will create elements for each data point that does not have a corresponding element to bind to. In this case, none of the data points have an element to bind to (we selected items with a class name of node, of which there are none), so the enter method will bind all 5 data points to new elements. These elements do not have a tag, so we call ‘.append(‘g’)’ which will add ‘g’ (for group) tags to each data point. The last line of code is to give these g elements the class of node."],
        ["p", "This was a lot, and fairly confusing, so to summarize each line:"],
        ["ol", ["24. Select the svg element.", "25. Select all items or future items with the class of node.", "26. Bind our data array to these elements.", "27. Create new elements if there are not enough for each data point.", "28. Append a ‘g’ element to these elements.", "29. Give these elements the class name of node."]],
        ["p", "Another way to think of this code is that some of it is being run though twice. On the first run-through, there are no elements with the class of node, so the data doesn’t have anything to bind to. On the ‘enter’ method we create new elements for the data, add a ‘g’ element to them, then give them the class name of node. ONLY NOW that they have the class of node, they are selected on line 25, and binded to the data."],
        ["img", "/public/blog/d3bubble/d34.JPG"],
        ["p", "Next we select the node elements and add a ‘circle’ to them. On the circle we can give it an ‘r’ attribute, which is the radius. This is where the linear scale we made is used. Instead of just passing in the population for each node to be its radius, we can pass in the linear scale function (saved as circleScale) with the population as the argument. Since we are using the scale, we are guaranteed that all circles will proportionally have a radius between 20 and 50px."],
        ["h3", "D3-Force"],
        ["p", "The next step is to setup the force layout. On like 35 I call the d3.forceSimulation method, which creates the force for our svg. On like 36 I call the ‘.force’ method, which takes 2 parameters, a name and a force. The name can be whatever we want, and I call it ‘x’ here. Then we pass in the force being applied. The first force we need is a horizontal force, that will push our circles where we want on the X axis. D3-force has a function for this, d3.forceX. Here I will pass in (width/2), which is half of the previously defined svg width from line 2. This will push all the circles toward that point in the svg. We also apply a ‘strength’ function to the force, to tell d3 how much power should be behind this force. A higher strength number would overpower other weaker forces. I do the same thing on line 37, only with the d3.forceY function and pass in (height/2). I also made sure to use the same strength as I did with the X force, or else one of the forces would overpower the other."],
        ["p", "The last force I apply is the forceCollide function. forceCollide is the force that keeps all of the circles from bumping into each other, and we can pass in a function to tell d3 how much room from each circle’s midpoint there should be from the next circle. In this case, we just need to pass in the radius of each circle, which again was the population put through the circleScale function. We also could add some additional padding if we wanted, which would have looked like: ‘d3.forceCollide((d) => circleScale(d.population) + 10)’."],
        ["img", "/public/blog/d3bubble/d35.JPG"],
        ["p", "The final code to get our initial chart is above. On line 40 I bind the data points to the force simulation. I then call the ‘.on’ method on it, which will call a ‘ticked’ method on every tick of the d3 force. The ticked method is defined below, which selects all the circles, and passes in their correct x and y positions. The way the ticked method works isn’t too important, just know that it is called repeatedly. Below are the results of the code written thus far:"],
        ["img", "/public/blog/d3bubble/d36.JPG"],
        ["p", "As you can see, all the circles are pushed together in the middle of both the X and Y axis. They are also different sizes, as each circle’s radius is the result of the circleScale method called on its population value."],
        ["h3", "Making a tooltip"],
        ["p", "Next we need a way to label the data. One option would be to put text over each bubble, but that doesn’t always work nicely in a bubble chart if any of the bubbles are small. An option I prefer is to use a tooltip, which moves dynamically around the screen when each bubble is hovered over."],
        ["img", "/public/blog/d3bubble/d37.JPG"],
        ["p", "The code for the tooltip is above. I started by selecting the body (In practice I would select the innermost div to the svg, but in this example I put only an svg in the body for simplicity). I appended a div to the body using the ‘.append’ method, and gave it the class ‘tooltip’ using the ‘.classed’ method. I then gave it some basic styling (which could also have been done in the css file using the ‘.tooltip’ selector). The most important styling is position absolute, and 0 opacity."],
        ["h3", "Using the ‘.on’ method"],
        ["p", "The next step is to select all the circles and give them a ‘.on’ method for the mouseover event, passing in the circles data as an argument. On line 63 I printed out what ‘c’ is when I first hovered over a circle, and we can see it gives us access to the data itself, as well as its position on the screen."],
        ["img", "/public/blog/d3bubble/d38.JPG"],
        ["p", "Inside the mouseover method I make a few important stylistic changes to the tooltip:"],
        ["ol", ["1. Change the opacity to 1.", "2. Give it a high z-index (anything above 0).", "3. Position vertically 50px from the circle’s position (-50 means 50px higher).", "4. Position horizontally at the circle’s position.", "5. Give it a text attribute of the state name."]],
        ["p", "Then on mouseout, change the opacity back to 0 and the z-index to -1. What this code does is move the tooltip div to be placed directly above whichever bubble we are hovering over. The reason I put the z-index to -1 on mouseout, is that if we did not change the z-index the tooltip would be on ‘top’ of the svg elements, and while invisible, it would not allow for the mouseover event to work on any covered bubbles. Changing the z-index to anything less than 0 fixes this problem. Just for fun I also added a small triangle onto the tooltip using CSS:"],
        ["img", "/public/blog/d3bubble/d39.JPG"],
        ["p", "The updated behavior is shown below."],
        ["img", "/public/blog/d3bubble/d3gif1.gif"],
        ["h3", "Adding a background"],
        ["p", "The next step in our chart is to add a background. This can be done using the HTML ‘pattern’ element. The first step is to find images for each data point, I found some online and added them to the data objects as seen below under the image attribute."],
        ["img", "/public/blog/d3bubble/d310.JPG"],
        ["p", "Next comes creating the patterns. To do these, I selected the nodes and appended a pattern. Each pattern is given a unique id, for simplicity I chose the image attribute. The id cannot have spaces in it, which is why I did not choose the state name. Ideally the data would come with an id property, which is a lot more intuitive to use than an image url. The rest of the code here is all needed to format the image to fit into the bubble properly. At the end, I set the image link to be the image attribute for each piece of data."],
        ["img", "/public/blog/d3bubble/d311.JPG"],
        ["p", "Next, I changed the fill attribute of the circles from blue to the patterns that we just created. I specified the image by referencing the unique IDs I just created in the last section, which will bind those patterns to these circles. I also added a stroke and stroke-width (which are like border for svg based elements) for styling purposes. The result is shown below:"],
        ["img", "/public/blog/d3bubble/d312.JPG"],
        ["p", "And here is the result of these changes:"],
        ["img", "/public/blog/d3bubble/d313.JPG"],
        ["h3", "Changing forces"],
        ["p", "Right now, our bubble chart can display our data, we have a working tooltip, and the bubbles have a background image. But the chart itself is a bit boring as nothing moves, so let’s change that! The d3-force layout does not just execute at runtime and then stop, it is continuously operating as long as the chart is showing. This means that we can modify the forces, which will move our bubbles around. Recall that earlier I hard-coded the ‘x’ and ‘y’ forces to push everything towards the middle of the SVG. A better pattern would be to extrapolate those methods and save them as variables, that could be used later. I’ve shown this below:"],
        ["img","/public/blog/d3bubble/d314.JPG"],
        ["img","/public/blog/d3bubble/d315.JPG"],
        ["p","One thing to note here is that we must define the forces before they are called, so I made sure to define the forceXNormal and forceYNormal variables on earlier lines than they are first called."],
        ["p","The next step is to create a few clickable buttons in the HTML with IDs, that when clicked will change the forces and move the bubbles around. I’ve added 4 buttons below:"],
        ["img","/public/blog/d3bubble/d316.JPG"],
        ["p","The first button I will cover is the ‘#split’ button. When someone clicks it, I want the bubbles to spread apart and head to the different corners of the svg. The code to accomplish this is below:"],
        ["img","/public/blog/d3bubble/d317.JPG"],
        ["p","With the earlier forceXNormal method, we returned width/2 for all data. Now with the forceXSplit method, the return value depends on the data itself. For datapoints with a population greater than 20 we return width/5, otherwise return 4*width/5. Likewise with the forceYSplit method, for names of states starting after ‘M’ we return height/5, otherwise return 4*height/5. I also kept the strength of these forces the same as before, 0.05."],
        ["img","/public/blog/d3bubble/d318.JPG"],
        ["p","Above is the code to handle the actual click of the ‘#split’ button. We can select the button itself using d3, and give it an on-click method. Inside the click handler, we simply select the force layout (we saved it to the variable simulation earlier), and then call the ‘.force’ method on both the ‘x’ and ‘y’ forces (we named them x and y earlier as well). We then apply the forces we just defined, giving ‘x’ the ‘forceXSplit’ method and ‘forceYSplit’ to ‘y’."],
        ["p","The next 2 lines of code are needed to ‘jump-start’ the force layout. The way force works is that it slowly dies down over time. Meaning if someone let the page sit for a while and then clicked our button, the bubbles would not move because the force would be dead. Setting the alpha target and calling restart on the force gives it a kick that is needed to ‘wake up’ the force. Let’s check out the new behavior:"],
        ["img","/public/blog/d3bubble/d3gif2.gif"],
        ["p","Wow! That only makes our chart about 1000x better. Notice where the bubbles have moved, Texas and California were the 2 states with populations over 20 so they moved to (width/5), while the rest moved to (4*width/5). And for the Y coordinates, Texas and New York are the states with names starting after M, so they both moved to (height/5) while the others moved to (4*height/5). Florida and Illinois both have names starting before M and populations under 20, so they moved to the same spot."],
        ["p","Let’s also active the ‘#normal’ button so that our bubbles can return to the starting position. This is only too easy as we already defined the forces that we need, forceXNormal and forceYNormal, and is why I wanted to pull those pieces of code out and save them as variables."],
        ["img","/public/blog/d3bubble/d319.JPG"],
        ["p","And the new behavior:"],
        ["img","/public/blog/d3bubble/d3gif3.gif"],
        ["p","The next behavior I wanted to implement was a way to sort the bubbles in order. Now there are many ways for this to be done, and I decided to try one that required a few different forces working together. To produce the ‘X’ coordinate I needed to find a way to give each bubble an ascending value, but how? My solution was to create another linear scale, like we did for the radius. Only this time, instead of a range of 20-50, I wanted a range that would produce good X coordinate values, so I made the minimum 100 and the maximum (width – 100):"],
        ["img","/public/blog/d3bubble/d320.JPG"],
        ["p","I then created the forceXSort method:"],
        ["img","/public/blog/d3bubble/d321.JPG"],
        ["p","This method uses the sortScale method I just created, and returns the corresponding value as the X coordinate. Since the min and max were 100 and width-100, the bubbles will all be given an X coordinate between those 2 values, and in the correct order. Now for the click handler:"],
        ["img","/public/blog/d3bubble/d322.JPG"],
        ["p","And the behavior"],
        ["img","/public/blog/d3bubble/d3gif4.gif"],
        ["p","Hmm… this code kind of works, but there are a couple bugs. The first obvious one is that the ‘y’ force gets messed up at the end. This is because we modified the Y force with the split click earlier, and never returned the Y force to being height/2. The other bug is that the bubbles are somewhat awkwardly spread out even when they are all on the same X axis. California’s population is so much greater than everyone else’s that its value from the sortScale method pushes it far off to the side. Now, this might be the desired behavior in some cases, but I would rather that the bubbles end up touching."],
        ["p","One way to fix this would be to call another group of forces after the bubbles have settled in the correct order, to push them into their final positions. This could be accomplished simply by using a setTimeout function inside the ‘#sort’ click handler, like so:"],
        ["img","/public/blog/d3bubble/d323.JPG"],
        ["p","I chose not to add the ‘.alphaTarget’ and ‘restart’ methods inside the setTimeout function because these forces would have just been called 3 seconds ago, and thus would not be needed to kick-start the force. My thought process here would be that we need to call forceYNormal to align all bubbles back to height/2, and calling forceXNormal will squish the bubbles together horizontally so that they touch. Here is the new behavior:"],
        ["img","/public/blog/d3bubble/d3gif5.gif"],
        ["p","Wow… that didn’t work at all! Calling forceXNormal inside the setTimeout completely overwrote the forceX sort method, and we ended up with the exact same behavior as when we click the ‘#normal’ button. So the solution? Creating a new forceX that is much weaker than the one we just called. We are calling forceYNormal with the strength of 0.05, so we need a new forceX that will be overpowered by that. It took some trial and error but I ended up with this:"],
        ["img","/public/blog/d3bubble/d324.JPG"],
        ["img","/public/blog/d3bubble/d325.JPG"],
        ["p", "And the behavior:"],
        ["img","/public/blog/d3bubble/d3gif6.gif"],
        ["p","Notice how the two different stages of forces work together. The first brings the bubbles into the correct order on the X axis, then after 3 seconds, the new forces bring them all to the same height on the X axis, and very gently pushes them towards the center of the svg. forceXWeak is just strong enough to move a bubble when it is not touching anything, but too weak to push past another circle on its way towards the center. I also added a reverse method:"],
        ["img","/public/blog/d3bubble/d326.JPG"],
        ["img","/public/blog/d3bubble/d327.JPG"],
        ["p", "The reverseSort method is the exact same as sort, only it returns (width-position) instead of just position. This means that the larger populations will end up on the left side. And now the behavior of all the buttons:"],
        ["img","/public/blog/d3bubble/d3gif7.gif"]
      ]
    },

    {
      "id": "p3",
      "title": "ReactCSSTransitionGroup",
      "url": "reactcsstransitiongroup",
      "teaser": "How to utilize the ReactCSSTransitionGroup to transition between components in React",
      "date": "Jan 22, 2017",
      "content": [
        ["h3", "Transitions using CSS"],
        ["p", "Transitions in CSS are easy. Simply add a transition property to the appropriate selector, specify which property is to be changed, the duration of the transition, pace and an optional delay. An example of transitioning the color and size of h1 elements is shown below, where each transition will last a half second. "],
        ["img", "/public/blog/reactcsstransition/transition4.JPG"],
        ["p", "These CSS transitions work just fine in React and can be used all over your code to create a smoother and more dynamic-feeling user experience. One of the benefits of React is the way that pages re-render themselves on state changes, adding and removing the appropriate components. Using transitions for these changes would be much more challenging than a typical CSS transition, and would require some pretty complex code in the React lifecycle methods for each component to properly add and remove the appropriate classes at the correct time. Fortunately, there is an extremely helpful add-on called the ReactCSSTransitionGroup which does all the heavy lifting for us."],
        ["h3", "ReactCSSTransitionGroup"],
        ["p", "The way the ReactCSSTransitionGroup works is that is can be attached to any component or array of components, and trigger transitions or animations when these components enter the DOM, leave the DOM, or first appear on a page load. I’ve created a simple app example that features 2 main components, List and ListItem. The code is below for reference:"],
        ["img", "/public/blog/reactcsstransition/transition1.JPG"],
        ["img", "/public/blog/reactcsstransition/transition2.JPG"],
        ["img", "/public/blog/reactcsstransition/transition3.JPG"],
        ["p", "The functionality works, where clicking an item will remove it from the DOM, while entering new info into the inputs and clicking the submit button will add a new ListItem to the DOM. While the functionality is nice, the sudden changes are a bit too abrupt and would clearly be better with some simple transitions. Below is the current behavior:"],
        ["img", "/public/blog/reactcsstransition/transitiongif1.gif"],
        ["h3", "Installing from NPM"],
        ["p", "So how could we animate this with the ReactCSSTransitionGroup? Pretty easily, actually. The first step is to install the add-on using npm, with the command ‘npm i –save react-addons-css-transition-group’. Next we will require it in the appropriate component. Now, the component we are looking to animate is ListItem, however we do NOT want to use the ReactCSSTransitionGroup on that element. This is because the ReactCSSTransitionGroup must already be mounted on the DOM for it to trigger the enter animation, and must remain on the DOM after an element is removed to trigger the removal animation. For these reasons, we are going to require it in the List component, even though we are not animating the List."],
        ["img", "/public/blog/reactcsstransition/transition5.JPG"],
        ["p", "Once we have required the group, we treat it just like any other element and place it right inside of the return method in our component. Place the ReactCSSTransitionGroup (or whatever you want to save the name as when you first required it) surrounding the element/s that you wish to transition. Also be sure to have supplied a key to these elements, which are needed for the transitions to work. There are a few properties to specify inside of the element tag:"],
        ["ol", ["transitionName (this is what the class will be called in the CSS file)", "transitionEnterTimeout (the amount of time the enter transition – including any delay – should take)", "transitionLeaveTimeout (the amount of time the exit transition should last)", "Optional: transitionAppear and transitionAppearTimeout. These are for using a transition on the initial page load. transitionAppear is, by default, set to false, so to trigger an appear animation it must be set to {true} and the appear timeout should also be specified."]],
        ["p", "Make sure that the ‘key’ given to each element that can be transitioned is not only unique with the current state of like items, but would remain unique if compared to a future or past state of the items. In other words, do NOT use the index, since if an item with index of 2 is removed, on the next render there could still be an item with an index of 2. This would confuse the ReactCSSTransitionGroup addon, so an easy fix is to make the key something completely unique, as I have done here by using the name property of each object. In practice this still is not a perfect key since we could theoretically want multiple people with the same name in our list, but for simplicity it is unique enough for this example."],
        ["img", "/public/blog/reactcsstransition/transition6.JPG"],
        ["h3", "Adding ReactCSSTransitionGroup to React code"],
        ["p", "I have created the transitionEnterTimeout and transitionLeave timeout, and set them both to 500ms. I also named the transition ‘li-trans’."],
        ["img", "/public/blog/reactcsstransition/transition7.JPG"],
        ["p", "Now let’s look at the CSS:"],
        ["img", "/public/blog/reactcsstransition/transition8.JPG"],
        ["p", "The way this works is that the we are given a few classes based on the name of the transition. I named the transition ‘li-trans’ (you can name the transition whatever you like). For the enter transition, there are 2 classes to write:"],
        ["ol", ["*name of transition*-enter (this is how the new element will appear when it first enters the DOM)", "*name of transition*-enter-active (this is how the new element will appear at the end of the transition)"]],
        ["p", "What ReactCSSTransitionGroup does under the hood is add the ‘enter’ class to your new element the instant it enters the DOM, and on the next ‘tick’, the ‘enter-active’ class is added. Therefore we also need to add the transition property in the CSS, as the ReactCSSTransitionGroup is not really doing any transitioning at all, it is merely just adding classes at the appropriate time. The same holds true for leave animations:"],
        ["ol", ["*name of transition*-leave (How the element should appear as the leave transition begins)", "*name of transition*-leave-active (How the element should appear at the end of the transition)"]],
        ["p", "Now let’s see how these transitions look:"],
        ["img", "/public/blog/reactcsstransition/transitiongif2.gif"],
        ["p", "As we see here, when a new list item is first added to the DOM it uses the rotateY transition we gave it, which takes 500ms. When we remove an element it first completes the transition from scale(1) to scale(0). Easy!"],
        ["h3", "Animate on page load with transitionAppear"],
        ["p", "The transitionEnter animation triggers when a component enters the already-existing DOM, so to animate on page load we can use the transitionAppear property. The first step is to set transitionAppear to true, says by default it does not trigger. And as was with enter and leave, specify a duration for the animation."],
        ["img", "/public/blog/reactcsstransition/transition9.JPG"],
        ["p", "Here is the code for the CSS, along with the resulting affect when the page is refreshed/first loaded. The same rules apply as with the ‘enter’ animations, only the keyword this time is ‘appear’. In this example I also decided to use a CSS animation and not just a transition."],
        ["img", "/public/blog/reactcsstransition/transition10.JPG"],
        ["img", "/public/blog/reactcsstransition/transitiongif3.gif"]


      ]
    },



    {
      "id": "p2",
      "title": "Hoisting",
      "url": "hoisting",
      "teaser": "What 'hoisting' really means in JS",
      "date": "Jan 20, 2017",
      "content": [
        ["p", "Hoisting is a concept to help us humans understand how JavaScript runs code. However, it is NOT actually how the JavaScript engine works. The idea of hoisting is that variable and function declarations are ‘moved’ to the beginning of code at runtime. That would explain how JavaScript is able to run and evaluate the following code, even though the printStuff function is called before it is declared:"],
        ["img", "/public/blog/scope/example1.JPG"],
        ["p", "But while this works nicely for a function declaration, what about a variable declaration?"],
        ["img", "/public/blog/scope/example2.JPG"],
        ["p", "Here, undefined is printed. So hoisting must not have happened, right? Let’s consider another example:"],
        ["img", "/public/blog/scope/example3.JPG"],
        ["p", "With this code, the ‘banana’ variable is not undefined like the last example, it is undeclared. Undefined is NOT the same thing as undeclared, as undefined means that a variable does exist, it just has no value. Whereas undeclared means that the variable does not exist."],
        ["p", "So what is happening here? Is hoisting going on or not? Well, nothing in the code is being ‘moved’ anywhere else. What the JavaScript engine is really doing is running through the code multiple times. The first time is the compiling phase, where it is looking for any variable for function declarations. With a variable declaration, all that the engine cares about is the declaration, not the initialization. This is why, in example 2, we received ‘undefined’ as the value for banana. JavaScript was aware that we declared a banana variable, as evidenced by the fact that we did not get a reference error, however clearly the compiling phase did not check to see what we wanted to set banana equal to. When we ran console.log(banana), JavaScript did not know the value of banana because we haven’t set that yet in the code, and it does not look at it during the compiling phase."],
        ["p", "So how did the first example work with the printStuff function? Because we did not call for a function initialization by setting it equal to a variable like so:"],
        ["img", "/public/blog/scope/example4.JPG"],
        ["p", "Why didn’t this code work? Because here we tried to use an initialization again. Read the error message, JavaScript did not throw a reference error to PrintNow, meaning that it had already seen it in the compiling phase. However like the variable initialization in example 2, our variable here is coming back undefined again, which is why JavaScript is telling us that PrintNow is not a function."],
        ["p", "But a function declaration is different. Instead of both declaring a variable and then initializing a value like the past example, a function declaration is compiled in its entirety. This means that we can call for a function that is later declared and JavaScript will be able to run our code."],
        ["p", "The last thing to remember about hoisting: It’s not real! It’s simply a way that is supposed to simplify the way declarations work in JavaScript. Personally I think it would be easier to just teach what is actually going on – that there is a compilation phase followed by an execution phase, and that the JavaScript engine actually runs through our code multiple times."]


      ]
    },
    {
      "id": "p1",
      "title": "IIFEs and Modules",
      "url": "iife",
      "teaser": "What an IIFE is and how it can be useful",
      "date": "Jan 18, 2017",
      "content": [
        ["p", "IIFE stands for an immediately invoked function expression. It has a few benefits:"],
        ["ol", ["Creates a new scope for variables, which prevents poling the global scope.", "Is great for creating modules as it can contain both public and private methods", "Leads to cleaner code because it is executed immediately and does not have to be both defined and then later called."]],
        ["p", "The syntax for an iife is below:"],
        ["img", "/public/blog/iife/iife1.JPG"],
        ["p", "The extra parentheses at the end are what immidately invoke (hence the name) the function, without being explicitly called later. Those parentheses can be placed either directly after or before the closing parentheses that wraps the function. An iife can also take an argument:"],
        ["img", "/public/blog/iife/iife2.JPG"],
        ["p", "An iife is a great way to create a module in JavaScript since it can contain both public and private methods. It can also be saved to a variable. These features are all shown below:"],
        ["img", "/public/blog/iife/iife3.JPG"],
        ["p", "There are a number of cool things going on here. First, the backticks ( ` ) are a new ES6 feature that allow for string interpolation in JavaScript. But back to the IIFE, by saving it to the variable myModule it is no longer being invoked at runtime, but rather is accessible to us later in the program. When we call the sayEverything method on line 23, sayEverything is able to access both the sayAge and sayFood methods, which are both private and inaccessible directly from the global scope. On line 24 the takeArg method shows that we can pass in a parameter to one of these public methods. Line 25 shows that none of the function defined outside of the return are private, and not available from the global scope. To make a method public, simply define it inside of the return, and separate multiple functions with commas. These public methods have access to all private functions and variables defined inside of the IIFE."]

      ]
    }

  ]
}